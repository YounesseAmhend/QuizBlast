{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\youne\\\\Desktop\\\\Brograming\\\\WEB\\\\Learning\\\\FinalProject\\\\quizblast\\\\my-app\\\\src\\\\components\\\\QuizView\\\\Quizview.tsx\",\n  _s = $RefreshSig$();\nimport { lazy, Suspense, useEffect, useRef, useState } from \"react\";\nimport { useFetch } from \"../ts/hooks\";\nimport Loading from \"../ts/components/loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Quiz = /*#__PURE__*/lazy(_c = () => import(\"./Quiz\"));\n_c2 = Quiz;\nexport default function Home(props) {\n  _s();\n  const [page, setPage] = useState(1);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [quizs, setQuizs] = useState([]);\n  const {\n    loaded,\n    fetchAgain: fetchQuizs\n  } = useFetch(`/quiz?page=${page}`, [], \"POST\");\n  const quizContainerRef = useRef(null);\n  useEffect(() => {\n    // create an intersection observer that will call fetchMore when the quiz container is scrolled to the bottom\n    const observer = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && !loadingMore) {\n        setLoadingMore(true);\n        setPage(page => page + 1);\n      }\n    }, {\n      root: quizContainerRef.current,\n      rootMargin: \"100px\"\n    });\n\n    // start observing the quiz container\n    if (quizContainerRef.current) {\n      observer.observe(quizContainerRef.current);\n    }\n    return () => {\n      // stop observing the quiz container when the component is unmounted\n      if (quizContainerRef.current) {\n        observer.unobserve(quizContainerRef.current);\n      }\n    };\n  }, [loadingMore]);\n  useEffect(() => {\n    // reset the quizs array and fetch more quiz data when the page changes\n    setQuizs([]);\n    setLoadingMore(true);\n    fetchQuizs();\n  }, [page]);\n  useEffect(() => {\n    // append the newly fetched quizs to the existing quizs array\n    if (quizs.length > 0 && loaded) {\n      setQuizs(oldQuizs => [...oldQuizs, ...quizs]);\n      setLoadingMore(false);\n    }\n  }, [quizs, loaded]);\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(Loading, {\n      loaded: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 29\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: quizContainerRef,\n      className: \"quiz-container\",\n      children: quizs.map(function (quiz) {\n        return /*#__PURE__*/_jsxDEV(Quiz, {\n          goView: props.goView,\n          setId: props.setId,\n          id: quiz.id,\n          username: quiz.username,\n          name: quiz.name\n        }, quiz.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), loadingMore && /*#__PURE__*/_jsxDEV(Loading, {\n      loaded: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"LaYxztAWSUQEF+LftvzrKPicH6Y=\", false, function () {\n  return [useFetch];\n});\n_c3 = Home;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Quiz$lazy\");\n$RefreshReg$(_c2, \"Quiz\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"names":["lazy","Suspense","useEffect","useRef","useState","useFetch","Loading","jsxDEV","_jsxDEV","Quiz","_c","_c2","Home","props","_s","page","setPage","loadingMore","setLoadingMore","quizs","setQuizs","loaded","fetchAgain","fetchQuizs","quizContainerRef","observer","IntersectionObserver","entries","isIntersecting","root","current","rootMargin","observe","unobserve","length","oldQuizs","fallback","fileName","_jsxFileName","lineNumber","columnNumber","children","ref","className","map","quiz","goView","setId","id","username","name","_c3","$RefreshReg$"],"sources":["C:/Users/youne/Desktop/Brograming/WEB/Learning/FinalProject/quizblast/my-app/src/components/QuizView/Quizview.tsx"],"sourcesContent":["import { lazy, Suspense, useEffect, useRef, useState } from \"react\";\r\nimport { useFetch } from \"../ts/hooks\";\r\nimport Loading from \"../ts/components/loading\";\r\n\r\ninterface Props {\r\n    goView(): void,\r\n    setId(par: number): void,\r\n}\r\n\r\ninterface Quiz {\r\n    id: number;\r\n    username: string;\r\n    name: string;\r\n}\r\n\r\nconst Quiz = lazy(() => import(\"./Quiz\"));\r\n\r\nexport default function Home(props: Props) {\r\n    const [page, setPage] = useState(1);\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n    const [quizs, setQuizs] = useState<Quiz[]>([]);\r\n    const { loaded, fetchAgain: fetchQuizs } = useFetch<Quiz[]>(`/quiz?page=${page}`, [], \"POST\");\r\n\r\n    const quizContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        // create an intersection observer that will call fetchMore when the quiz container is scrolled to the bottom\r\n        const observer = new IntersectionObserver(\r\n            (entries) => {\r\n                if (entries[0].isIntersecting && !loadingMore) {\r\n                    setLoadingMore(true);\r\n                    setPage((page) => page + 1);\r\n                }\r\n            },\r\n            {\r\n                root: quizContainerRef.current,\r\n                rootMargin: \"100px\",\r\n            }\r\n        );\r\n\r\n        // start observing the quiz container\r\n        if (quizContainerRef.current) {\r\n            observer.observe(quizContainerRef.current);\r\n        }\r\n\r\n        return () => {\r\n            // stop observing the quiz container when the component is unmounted\r\n            if (quizContainerRef.current) {\r\n                observer.unobserve(quizContainerRef.current);\r\n            }\r\n        };\r\n    }, [loadingMore]);\r\n\r\n    useEffect(() => {\r\n        // reset the quizs array and fetch more quiz data when the page changes\r\n        setQuizs([]);\r\n        setLoadingMore(true);\r\n        fetchQuizs();\r\n    }, [page]);\r\n\r\n    useEffect(() => {\r\n        // append the newly fetched quizs to the existing quizs array\r\n        if (quizs.length > 0 && loaded) {\r\n            setQuizs((oldQuizs) => [...oldQuizs, ...quizs]);\r\n            setLoadingMore(false);\r\n        }\r\n    }, [quizs, loaded]);\r\n\r\n    return (\r\n        <Suspense fallback={<Loading loaded={false} />}>\r\n            <div ref={quizContainerRef} className=\"quiz-container\">\r\n                {quizs.map(function (quiz: Quiz) {\r\n                    return (\r\n                        <Quiz\r\n                            goView={props.goView}\r\n                            setId={props.setId}\r\n                            key={quiz.id}\r\n                            id={quiz.id}\r\n                            username={quiz.username}\r\n                            name={quiz.name}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n            {loadingMore && <Loading loaded={false} />}\r\n        </Suspense>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}