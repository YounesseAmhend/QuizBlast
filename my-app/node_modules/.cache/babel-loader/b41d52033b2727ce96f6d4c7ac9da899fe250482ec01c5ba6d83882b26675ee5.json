{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\youne\\\\Desktop\\\\Brograming\\\\WEB\\\\Learning\\\\FinalProject\\\\quizblast\\\\my-app\\\\src\\\\components\\\\ts\\\\components\\\\csrf.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function getCookie(name) {\n  let cookieValue = \"\";\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\nconst csrftoken = getCookie('csrftoken');\nconst CSRFToken = () => {\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"hidden\",\n    value: csrftoken,\n    name: \"csrfmiddlewaretoken\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_c = CSRFToken;\nexport default CSRFToken;\nvar _c;\n$RefreshReg$(_c, \"CSRFToken\");","map":{"version":3,"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","csrftoken","CSRFToken","_jsxDEV","type","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/youne/Desktop/Brograming/WEB/Learning/FinalProject/quizblast/my-app/src/components/ts/components/csrf.tsx"],"sourcesContent":["export function getCookie(name : string) : string {\r\n    let cookieValue = \"\";\r\n    if (document.cookie && document.cookie !== '') {\r\n        const cookies = document.cookie.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\nconst csrftoken : string = getCookie('csrftoken');\r\n\r\nconst CSRFToken = () => {\r\n    return (\r\n        <input type=\"hidden\" value={csrftoken} name=\"csrfmiddlewaretoken\" />\r\n    );\r\n};\r\nexport default CSRFToken;\r\n\r\n"],"mappings":";;AAAA,OAAO,SAASA,SAASA,CAACC,IAAa,EAAW;EAC9C,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,QAAQ,CAACC,MAAM,IAAID,QAAQ,CAACC,MAAM,KAAK,EAAE,EAAE;IAC3C,MAAMC,OAAO,GAAGF,QAAQ,CAACC,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC;IAC1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,MAAMH,MAAM,GAAGC,OAAO,CAACE,CAAC,CAAC,CAACE,IAAI,EAAE;MAChC;MACA,IAAIL,MAAM,CAACM,SAAS,CAAC,CAAC,EAAET,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,KAAMP,IAAI,GAAG,GAAI,EAAE;QACvDC,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAS,CAACT,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,CAAC;QACnE;MACJ;IACJ;EACJ;EACA,OAAON,WAAW;AACtB;AACA,MAAMU,SAAkB,GAAGZ,SAAS,CAAC,WAAW,CAAC;AAEjD,MAAMa,SAAS,GAAGA,CAAA,KAAM;EACpB,oBACIC,OAAA;IAAOC,IAAI,EAAC,QAAQ;IAACC,KAAK,EAAEJ,SAAU;IAACX,IAAI,EAAC;EAAqB;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAE5E,CAAC;AAACC,EAAA,GAJIR,SAAS;AAKf,eAAeA,SAAS;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}