{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\youne\\\\Desktop\\\\Brograming\\\\WEB\\\\Learning\\\\FinalProject\\\\quizblast\\\\my-app\\\\src\\\\components\\\\QuizForm\\\\question.tsx\",\n  _s = $RefreshSig$();\nimport { QuestionInput } from './QuestionInput';\nimport Button from 'react-bootstrap/Button';\nimport { useState, useRef } from 'react';\nimport Options from './Options';\nimport Input from './Input';\nimport QuestionHead from './QuestoinHeadForm';\nimport Time from './Time';\nimport { CompareOptions, updateQuestions, getQuestion, subQuestion, isOnlySpace, isSelect, makeid, remove } from '../ts/staticFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function QuestionForm(props) {\n  _s();\n  const VALIDATIONS = {\n    OPTIONS_LIMIT: 4,\n    OPTIONS_MAX_LENGTH: 100,\n    OPTIONS_MIN: 1\n  };\n  const ID_LENGTH = 6;\n  const InputQ = useRef(null);\n  const [questions, setQuestions] = useState([]);\n  const [visible, setVisible] = useState(false);\n  const [inputs, setInputs] = useState({\n    question: \"\",\n    option: \"\"\n  });\n  const [options, setOptions] = useState([]);\n  const [currentCount, setCurrentCount] = useState(1);\n  const [changed, SetChanged] = useState(false);\n  // functions\n  function UpdateQuestion() {\n    let question = questions[currentCount - 1];\n    question.content = inputs.question;\n    question.options = options;\n    setQuestions(updateQuestions(questions, question));\n  }\n  function changeInput(event) {\n    setInputs({\n      question: inputs.question,\n      option: event.target.value\n    });\n  }\n  function add() {\n    visible ? setVisible(false) : setVisible(true);\n    if (inputs.option !== \"\" && options.length < VALIDATIONS.OPTIONS_LIMIT && inputs.option.length < VALIDATIONS.OPTIONS_MAX_LENGTH && isOnlySpace(inputs.option)) {\n      setOptions([...options, {\n        id: makeid(ID_LENGTH),\n        text: inputs.option,\n        correct: false\n      }]);\n    }\n    setInputs({\n      question: inputs.question,\n      option: \"\"\n    });\n  }\n  function addOptionKey(event) {\n    if (event.key === \"Enter\" && options.length < VALIDATIONS.OPTIONS_LIMIT && inputs.option !== \"\" && inputs.option.length < VALIDATIONS.OPTIONS_MAX_LENGTH && isOnlySpace(inputs.option)) {\n      setOptions([...options, {\n        id: makeid(ID_LENGTH),\n        text: inputs.option,\n        correct: false\n      }]);\n      setInputs({\n        question: inputs.question,\n        option: \"\"\n      });\n    }\n  }\n  function changeFocus(event) {\n    if (event.key === \"Enter\") {\n      setVisible(true);\n    }\n  }\n  function removeOption(id) {\n    setOptions([...remove(options, id)]);\n  }\n  function corrected(key) {\n    let ops = options;\n    SetChanged(true);\n    ops.forEach(option => {\n      option.id === key ? option.correct = true : option.correct = false;\n    });\n    setOptions([...ops]);\n  }\n  function changeInputQuestion(event) {\n    setInputs({\n      option: inputs.option,\n      question: event.target.value\n    });\n  }\n  async function next(event) {\n    var _InputQ$current;\n    event.currentTarget.blur();\n    (_InputQ$current = InputQ.current) === null || _InputQ$current === void 0 ? void 0 : _InputQ$current.focus();\n    if (options.length > VALIDATIONS.OPTIONS_MIN && inputs.question.length > 0 && isSelect(options) && questions.length === currentCount - 1) {\n      setVisible(false);\n      let quiz_id = props.quiz_id;\n      let optionsToSub = options.map(_ref => {\n        let {\n          id,\n          ...rest\n        } = _ref;\n        return rest;\n      });\n      let input = inputs.question;\n      setInputs({\n        question: \"\",\n        option: \"\"\n      });\n      setOptions([]);\n      setVisible(false);\n      window.scrollTo(0, 0);\n      let question_id = await subQuestion(quiz_id, input, optionsToSub);\n      setCurrentCount(currentCount + 1);\n      setQuestions([...questions, {\n        count: questions.length + 1,\n        quiz_id: quiz_id,\n        options: options,\n        id: question_id,\n        content: input\n      }]);\n    } else if (options.length > VALIDATIONS.OPTIONS_MIN && inputs.question.length > 0 && isSelect(options) && questions.length > currentCount) {\n      let question = getQuestion(currentCount + 1, questions);\n      if (changed || !CompareOptions(questions[currentCount - 1].options, options) || questions[currentCount - 1].content !== inputs.question) {\n        UpdateQuestion();\n      }\n      setCurrentCount(currentCount + 1);\n      setInputs({\n        question: question.content,\n        option: \"\"\n      });\n      setOptions(question.options);\n    } else if (currentCount - 1 < questions.length) {\n      if (currentCount === questions.length && (changed || !CompareOptions(questions[currentCount - 1].options, options) || questions[currentCount - 1].content !== inputs.question)) {\n        UpdateQuestion();\n      }\n      setOptions([]);\n      setInputs({\n        question: \"\",\n        option: \"\"\n      });\n      setCurrentCount(currentCount + 1);\n    }\n    SetChanged(false);\n  }\n  function back() {\n    if (currentCount > 1) {\n      if (currentCount === questions.length && (changed || !CompareOptions(questions[currentCount - 1].options, options) || questions[currentCount - 1].content !== inputs.question)) {\n        UpdateQuestion();\n      }\n      setCurrentCount(currentCount - 1);\n      let question = getQuestion(currentCount - 1, questions);\n      setOptions(question.options);\n      SetChanged(false);\n      setInputs({\n        question: question.content,\n        option: \"\"\n      });\n    } else {\n      if (currentCount === questions.length && (changed || !CompareOptions(questions[currentCount - 1].options, options) || questions[currentCount - 1].content !== inputs.question)) {\n        UpdateQuestion();\n      }\n      if (questions.length > 1) {\n        props.setSave(true);\n      }\n      props.onBack();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.visible && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"div\", /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-4xl font-medium\",\n        children: \"Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Time, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"quiz-form-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-form\",\n          children: [/*#__PURE__*/_jsxDEV(QuestionInput, {\n            Ref: InputQ,\n            value: inputs.question,\n            changeInputQuestion: changeInputQuestion,\n            changeFocus: changeFocus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"all-options\",\n            children: [/*#__PURE__*/_jsxDEV(QuestionHead, {\n              add: add\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Options, {\n              remove: removeOption,\n              Options: options,\n              corrected: corrected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            visible: visible,\n            addOptionKey: addOptionKey,\n            input: inputs.option,\n            changeInput: changeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                className: \"bg-blue-600\",\n                id: \"back-btn\",\n                onClick: back,\n                variant: \"primary\",\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"bg-blue-600\",\n                variant: \"primary\",\n                onClick: next,\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 33\n            }, this), questions.length > 1 && /*#__PURE__*/_jsxDEV(Button, {\n              onClick: props.onSave,\n              className: \"bg-blue-600\",\n              variant: \"primary\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n_s(QuestionForm, \"+mRil1JHygm/pM5tWFNggXMAEws=\");\n_c = QuestionForm;\nvar _c;\n$RefreshReg$(_c, \"QuestionForm\");","map":{"version":3,"names":["QuestionInput","Button","useState","useRef","Options","Input","QuestionHead","Time","CompareOptions","updateQuestions","getQuestion","subQuestion","isOnlySpace","isSelect","makeid","remove","jsxDEV","_jsxDEV","Fragment","_Fragment","QuestionForm","props","_s","VALIDATIONS","OPTIONS_LIMIT","OPTIONS_MAX_LENGTH","OPTIONS_MIN","ID_LENGTH","InputQ","questions","setQuestions","visible","setVisible","inputs","setInputs","question","option","options","setOptions","currentCount","setCurrentCount","changed","SetChanged","UpdateQuestion","content","changeInput","event","target","value","add","length","id","text","correct","addOptionKey","key","changeFocus","removeOption","corrected","ops","forEach","changeInputQuestion","next","_InputQ$current","currentTarget","blur","current","focus","quiz_id","optionsToSub","map","_ref","rest","input","window","scrollTo","question_id","count","back","setSave","onBack","children","className","fileName","_jsxFileName","lineNumber","columnNumber","Ref","onClick","variant","onSave","_c","$RefreshReg$"],"sources":["C:/Users/youne/Desktop/Brograming/WEB/Learning/FinalProject/quizblast/my-app/src/components/QuizForm/question.tsx"],"sourcesContent":["import { QuestionInput } from './QuestionInput';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useState, useRef } from 'react';\r\nimport Options from './Options';\r\nimport Input from './Input';\r\nimport QuestionHead from './QuestoinHeadForm';\r\nimport Time from './Time';\r\nimport { CompareOptions, updateQuestions, getQuestion, subQuestion, isOnlySpace, isSelect, makeid, remove } from '../ts/staticFunctions';\r\n\r\ninterface Props {\r\n    visible: boolean,\r\n    onBack(): void,\r\n    quiz_id: number,\r\n    setSave(par: boolean): void,\r\n    onSave(): void,\r\n}\r\ninterface Option {\r\n    id: string,\r\n    text: string,\r\n    correct: boolean,\r\n}\r\ninterface Question {\r\n    count: number,\r\n    quiz_id: number,\r\n    id: number | undefined,\r\n    content: string,\r\n    options: Option[],\r\n}\r\nexport default function QuestionForm(props: Props) {\r\n\r\n    const VALIDATIONS = {\r\n        OPTIONS_LIMIT : 4,\r\n        OPTIONS_MAX_LENGTH: 100,\r\n        OPTIONS_MIN : 1,\r\n    }\r\n    const ID_LENGTH = 6\r\n\r\n    const InputQ = useRef<HTMLInputElement>(null)\r\n    const [questions, setQuestions] = useState<Question[]>([])\r\n    const [visible, setVisible] = useState(false)\r\n    const [inputs, setInputs] = useState({\r\n        question: \"\",\r\n        option: \"\"\r\n    })\r\n    const [options, setOptions] = useState<Option[]>([])\r\n    const [currentCount, setCurrentCount] = useState(1)\r\n    const [changed, SetChanged] = useState(false)\r\n    // functions\r\n    function UpdateQuestion() {\r\n        let question = questions[currentCount - 1];\r\n\r\n        question.content = inputs.question;\r\n        question.options = options;\r\n\r\n        setQuestions(updateQuestions(questions, question));\r\n    }\r\n    function changeInput(event: React.ChangeEvent<HTMLInputElement>) {\r\n        setInputs({ question: inputs.question, option: event.target.value });\r\n    }\r\n\r\n    function add() {\r\n        visible ? setVisible(false) : setVisible(true)\r\n        if (inputs.option !== \"\" && options.length < VALIDATIONS.OPTIONS_LIMIT && inputs.option.length < VALIDATIONS.OPTIONS_MAX_LENGTH && isOnlySpace(inputs.option)) {\r\n            setOptions([...options, { id: makeid(ID_LENGTH), text: inputs.option, correct: false }])\r\n        }\r\n        setInputs({ question: inputs.question, option: \"\" })\r\n    }\r\n\r\n    function addOptionKey(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === \"Enter\" && options.length < VALIDATIONS.OPTIONS_LIMIT && inputs.option !== \"\" && inputs.option.length < VALIDATIONS.OPTIONS_MAX_LENGTH && isOnlySpace(inputs.option)) {\r\n            setOptions([...options, { id: makeid(ID_LENGTH), text: inputs.option, correct: false }])\r\n            setInputs({ question: inputs.question, option: \"\" })\r\n        }\r\n    }\r\n    function changeFocus(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === \"Enter\") {\r\n            setVisible(true);\r\n        }\r\n    }\r\n    function removeOption(id: string) {\r\n        setOptions([...remove(options, id)])\r\n    }\r\n    function corrected(key: string) {\r\n        let ops = options\r\n        SetChanged(true)\r\n        ops.forEach((option) => {\r\n            option.id === key ? option.correct = true : option.correct = false;\r\n        })\r\n        setOptions([...ops])\r\n    }\r\n    function changeInputQuestion(event: React.ChangeEvent<HTMLInputElement>) {\r\n        setInputs({ option: inputs.option, question: event.target.value })\r\n    }\r\n    async function next(event: React.MouseEvent<HTMLElement>) {\r\n        event.currentTarget.blur();\r\n        InputQ.current?.focus()\r\n        if (options.length > VALIDATIONS.OPTIONS_MIN && inputs.question.length > 0 && isSelect(options) && questions.length === currentCount - 1) {\r\n            setVisible(false)\r\n            let quiz_id = props.quiz_id\r\n            let optionsToSub = options.map(({ id, ...rest }) => rest);\r\n            let input = inputs.question\r\n            setInputs({ question: \"\", option: \"\" })\r\n            setOptions([])\r\n            setVisible(false)\r\n            window.scrollTo(0, 0);\r\n\r\n            let question_id: number | undefined = await subQuestion(quiz_id, input, optionsToSub)\r\n            setCurrentCount(currentCount + 1)\r\n            setQuestions([...questions, { count: questions.length + 1, quiz_id: quiz_id, options: options, id: question_id, content: input }])\r\n        }\r\n        else if (options.length > VALIDATIONS.OPTIONS_MIN && inputs.question.length > 0 && isSelect(options) && questions.length > currentCount) {\r\n            let question = getQuestion(currentCount + 1, questions)\r\n\r\n            if (changed || !CompareOptions(questions[currentCount - 1].options, options) || questions[currentCount - 1].content !== inputs.question) {\r\n                UpdateQuestion();\r\n            }\r\n\r\n            setCurrentCount(currentCount + 1)\r\n            setInputs({ question: question.content, option: \"\" })\r\n            setOptions(question.options)\r\n        }\r\n        else if (currentCount - 1 < questions.length) {\r\n            if (currentCount === questions.length && (changed || !CompareOptions(questions[currentCount - 1].options, options) || questions[currentCount - 1].content !== inputs.question)) {\r\n                UpdateQuestion();\r\n            }\r\n            setOptions([])\r\n            setInputs({ question: \"\", option: \"\" })\r\n            setCurrentCount(currentCount + 1)\r\n        }\r\n        SetChanged(false)\r\n    }\r\n    function back() {\r\n        if (currentCount > 1) {\r\n            if (currentCount === questions.length && (changed || !CompareOptions(questions[currentCount - 1].options, options) || questions[currentCount - 1].content !== inputs.question)) {\r\n                UpdateQuestion();\r\n            }\r\n            setCurrentCount(currentCount - 1)\r\n            let question = getQuestion(currentCount - 1, questions)\r\n            setOptions(question.options)\r\n            SetChanged(false)\r\n            setInputs({ question: question.content, option: \"\" })\r\n        }\r\n        else {\r\n            if (currentCount === questions.length && (changed || !CompareOptions(questions[currentCount - 1].options, options) || questions[currentCount - 1].content !== inputs.question)) {\r\n                UpdateQuestion();\r\n            }\r\n            if (questions.length > 1) { props.setSave(true) }\r\n            props.onBack()\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {props.visible &&\r\n                <>\r\n                    div\r\n                        <h2 className='text-4xl font-medium'>Question</h2>\r\n                        <Time />\r\n                    <div id='quiz-form-container' >\r\n                        \r\n                        <div className='quiz-form'>\r\n                            <QuestionInput Ref={InputQ} value={inputs.question} changeInputQuestion={changeInputQuestion} changeFocus={changeFocus} />\r\n                            <div className='all-options'>\r\n                                <QuestionHead add={add} />\r\n                                <Options remove={removeOption} Options={options} corrected={corrected} />\r\n                            </div>\r\n                            <Input visible={visible} addOptionKey={addOptionKey} input={inputs.option} changeInput={changeInput} />\r\n                            <div className='space-between'>\r\n                                <div>\r\n                                    <Button className=\"bg-blue-600\" id=\"back-btn\" onClick={back} variant=\"primary\">\r\n                                        Back\r\n                                    </Button>\r\n                                    <Button className=\"bg-blue-600\" variant=\"primary\" onClick={next}>\r\n                                        Next\r\n                                    </Button>\r\n                                </div>\r\n                                {questions.length > 1 &&\r\n                                    <Button onClick={props.onSave} className=\"bg-blue-600\" variant=\"primary\">\r\n                                        Save\r\n                                    </Button>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}