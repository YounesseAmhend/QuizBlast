{"ast":null,"code":"import { getCookie } from \"../csrf\";\nexport function makeid(length) {\n  let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');\n  if (!length) {\n    length = Math.floor(Math.random() * chars.length);\n  }\n  let str = '';\n  for (var i = 0; i < length; i++) {\n    str += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return str;\n}\nexport function remove(list, id) {\n  return list.filter(item => item.id !== id);\n}\n// interfaces\n\nexport async function getQuizs() {\n  let quizs = \"\";\n  await fetch(\"/quiz\").then(response => {\n    return response.json();\n  }).then(result => {\n    quizs = result;\n  });\n  return quizs;\n}\nexport async function subQuiz(input) {\n  let id = \"\";\n  await fetch(\"/new\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      \"name\": input\n    })\n  }).then(response => response.json()).then(result => id = result.quiz_id);\n  return id;\n}\nexport async function subQuestion(quiz_id, input, optionsToSub) {\n  let question_id = undefined;\n  if (optionsToSub.length > 0 && input !== \"\") {\n    await fetch(\"/question\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        \"quiz_id\": quiz_id,\n        \"content\": input,\n        \"option\": optionsToSub\n      })\n    }).then(response => response.json()).then(result => question_id = result.question_id);\n    return question_id;\n  }\n}\nexport function isOnlySpace(input) {\n  return !input.trim().length ? false : true;\n}\nexport function isSelect(option) {\n  for (let i = 0; i < option.length; i++) {\n    if (option[i].correct) {\n      return true;\n    }\n  }\n  return false;\n}\nexport function getQuestion(count, questions) {\n  for (let i = 0; i < questions.length; i++) {\n    if (questions[i].count === count) {\n      return questions[i];\n    }\n  }\n  return questions[0];\n}\nexport function updateQuestions(questions, question) {\n  subUpQuestion(question);\n  let index = question.count - 1;\n  questions[index] = question;\n  return questions;\n}\nexport function CompareOptions(options_A, options_B) {\n  if (options_A.length !== options_B.length) return false;\n  return true;\n}\n_c = CompareOptions;\nexport async function subUpQuestion(question) {\n  await fetch(\"/question\", {\n    method: \"PUT\",\n    body: JSON.stringify({\n      question_id: question.id,\n      content: question.content,\n      options: question.options\n    })\n  });\n}\nexport async function UpQuiz(input, id) {\n  if (id) await fetch(\"/new\", {\n    method: \"PUT\",\n    body: JSON.stringify({\n      \"name\": input,\n      quiz_id: id\n    })\n  });\n}\n_c2 = UpQuiz;\nexport const logout = async () => {\n  const csrftoken = getCookie('csrftoken');\n  let headers = new Headers();\n  headers.append('X-CSRFToken', csrftoken);\n  fetch(\"http://127.0.0.1:8000/logout\", {\n    method: 'POST',\n    headers: headers,\n    credentials: 'include'\n  });\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"CompareOptions\");\n$RefreshReg$(_c2, \"UpQuiz\");","map":{"version":3,"names":["getCookie","makeid","length","chars","split","Math","floor","random","str","i","remove","list","id","filter","item","getQuizs","quizs","fetch","then","response","json","result","subQuiz","input","method","body","JSON","stringify","quiz_id","subQuestion","optionsToSub","question_id","undefined","isOnlySpace","trim","isSelect","option","correct","getQuestion","count","questions","updateQuestions","question","subUpQuestion","index","CompareOptions","options_A","options_B","_c","content","options","UpQuiz","_c2","logout","csrftoken","headers","Headers","append","credentials","$RefreshReg$"],"sources":["C:/Users/youne/Desktop/Brograming/WEB/Learning/FinalProject/quizblast/my-app/src/components/ts/staticFunctions.ts"],"sourcesContent":["import { getCookie } from \"../csrf\";\r\n\r\nexport function makeid(length: number) {\r\n    let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');\r\n\r\n    if (! length) {\r\n        length = Math.floor(Math.random() * chars.length);\r\n    }\r\n\r\n    let str = '';\r\n    for (var i = 0; i < length; i++) {\r\n        str += chars[Math.floor(Math.random() * chars.length)];\r\n    }\r\n    return str;\r\n}\r\nexport function remove(list: any[], id: any): any[]{\r\n    return list.filter((item)=>item.id !== id)\r\n}\r\n// interfaces\r\ninterface Quiz{\r\n    id:number,\r\n    username:string,\r\n    name:string,\r\n}\r\ninterface Option {\r\n    id: string,\r\n    text: string,\r\n    correct: boolean,\r\n}\r\ninterface Question {\r\n    count: number,\r\n    quiz_id: number,\r\n    id: number | undefined,\r\n    content: string,\r\n    options: Option[],\r\n}\r\nexport async function getQuizs():Promise<Quiz[]>{\r\n    let quizs:any =\"\"\r\n    await fetch(\"/quiz\")\r\n    .then(response =>{\r\n        return response.json()\r\n    })\r\n    .then((result)=>{\r\n        quizs = result\r\n    })\r\n    return quizs;\r\n}\r\nexport async function subQuiz(input:string):Promise<number>{\r\n    let id:any=\"\"\r\n    await fetch(\"/new\",{\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n            \"name\": input\r\n        })\r\n    })\r\n    .then((response)=>response.json())\r\n    .then(result=>\r\n        id = result.quiz_id\r\n    )\r\n    return id\r\n}\r\ninterface optionSub{\r\n    text: string;\r\n    correct: boolean;\r\n}\r\nexport async function subQuestion(quiz_id:number, input:string, optionsToSub:optionSub[]){\r\n    let question_id : number | undefined = undefined\r\n    if (optionsToSub.length > 0 && input !== \"\"){\r\n        await fetch(\"/question\",{\r\n                method: \"POST\",\r\n                body: JSON.stringify({\r\n                    \"quiz_id\": quiz_id,\r\n                    \"content\": input,\r\n                    \"option\": optionsToSub,\r\n                })\r\n            })\r\n            .then((response)=>response.json())\r\n            .then(result=>\r\n                question_id = result.question_id\r\n            )\r\n            return question_id\r\n    }\r\n}\r\nexport function isOnlySpace(input: string): boolean {\r\n    return !input.trim().length ? false : true\r\n}\r\nexport function isSelect(option:Option[]):boolean {\r\n    for (let i = 0; i < option.length; i++) {\r\n        if(option[i].correct){\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\nexport function getQuestion(count:number,questions: Question[]):Question{\r\n    for(let i = 0; i < questions.length; i++) {\r\n        if(questions[i].count === count){\r\n            return questions[i]\r\n        }\r\n    }\r\n    return questions[0]\r\n}\r\n\r\nexport function updateQuestions(questions:Question[], question:Question):Question[]{\r\n    subUpQuestion(question)\r\n    let index = question.count-1\r\n    questions[index] = question\r\n    return questions\r\n}\r\n\r\nexport function CompareOptions(options_A:Option [], options_B:Option []):boolean {\r\n    if (options_A.length !== options_B.length)\r\n        return false\r\n    return true\r\n}\r\nexport async function subUpQuestion(question:Question){\r\n    await fetch(\"/question\",{\r\n        method:\"PUT\",\r\n        body: JSON.stringify({\r\n            question_id: question.id,\r\n            content: question.content,\r\n            options: question.options\r\n        })\r\n    })\r\n}\r\nexport async function UpQuiz(input:string, id:number|undefined){\r\n    if(id)\r\n    await fetch(\"/new\",{\r\n        method: \"PUT\",\r\n        body: JSON.stringify({\r\n            \"name\": input,\r\n            quiz_id: id\r\n        })\r\n    })\r\n}\r\nexport const logout = async () => {\r\n    const csrftoken = getCookie('csrftoken');\r\n    let headers = new Headers();\r\n    headers.append('X-CSRFToken', csrftoken);\r\n    fetch(\"http://127.0.0.1:8000/logout\", {\r\n        method: 'POST',\r\n        headers: headers,\r\n        credentials: 'include'\r\n    })\r\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,SAAS;AAEnC,OAAO,SAASC,MAAMA,CAACC,MAAc,EAAE;EACnC,IAAIC,KAAK,GAAG,+DAA+D,CAACC,KAAK,CAAC,EAAE,CAAC;EAErF,IAAI,CAAEF,MAAM,EAAE;IACVA,MAAM,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,KAAK,CAACD,MAAM,CAAC;EACrD;EAEA,IAAIM,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,EAAEO,CAAC,EAAE,EAAE;IAC7BD,GAAG,IAAIL,KAAK,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,KAAK,CAACD,MAAM,CAAC,CAAC;EAC1D;EACA,OAAOM,GAAG;AACd;AACA,OAAO,SAASE,MAAMA,CAACC,IAAW,EAAEC,EAAO,EAAQ;EAC/C,OAAOD,IAAI,CAACE,MAAM,CAAEC,IAAI,IAAGA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC;AAC9C;AACA;;AAkBA,OAAO,eAAeG,QAAQA,CAAA,EAAkB;EAC5C,IAAIC,KAAS,GAAE,EAAE;EACjB,MAAMC,KAAK,CAAC,OAAO,CAAC,CACnBC,IAAI,CAACC,QAAQ,IAAG;IACb,OAAOA,QAAQ,CAACC,IAAI,EAAE;EAC1B,CAAC,CAAC,CACDF,IAAI,CAAEG,MAAM,IAAG;IACZL,KAAK,GAAGK,MAAM;EAClB,CAAC,CAAC;EACF,OAAOL,KAAK;AAChB;AACA,OAAO,eAAeM,OAAOA,CAACC,KAAY,EAAiB;EACvD,IAAIX,EAAM,GAAC,EAAE;EACb,MAAMK,KAAK,CAAC,MAAM,EAAC;IACfO,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjB,MAAM,EAAEJ;IACZ,CAAC;EACL,CAAC,CAAC,CACDL,IAAI,CAAEC,QAAQ,IAAGA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,MAAM,IACRT,EAAE,GAAGS,MAAM,CAACO,OAAO,CACtB;EACD,OAAOhB,EAAE;AACb;AAKA,OAAO,eAAeiB,WAAWA,CAACD,OAAc,EAAEL,KAAY,EAAEO,YAAwB,EAAC;EACrF,IAAIC,WAAgC,GAAGC,SAAS;EAChD,IAAIF,YAAY,CAAC5B,MAAM,GAAG,CAAC,IAAIqB,KAAK,KAAK,EAAE,EAAC;IACxC,MAAMN,KAAK,CAAC,WAAW,EAAC;MAChBO,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjB,SAAS,EAAEC,OAAO;QAClB,SAAS,EAAEL,KAAK;QAChB,QAAQ,EAAEO;MACd,CAAC;IACL,CAAC,CAAC,CACDZ,IAAI,CAAEC,QAAQ,IAAGA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,MAAM,IACRU,WAAW,GAAGV,MAAM,CAACU,WAAW,CACnC;IACD,OAAOA,WAAW;EAC1B;AACJ;AACA,OAAO,SAASE,WAAWA,CAACV,KAAa,EAAW;EAChD,OAAO,CAACA,KAAK,CAACW,IAAI,EAAE,CAAChC,MAAM,GAAG,KAAK,GAAG,IAAI;AAC9C;AACA,OAAO,SAASiC,QAAQA,CAACC,MAAe,EAAU;EAC9C,KAAK,IAAI3B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,MAAM,CAAClC,MAAM,EAAEO,CAAC,EAAE,EAAE;IACpC,IAAG2B,MAAM,CAAC3B,CAAC,CAAC,CAAC4B,OAAO,EAAC;MACjB,OAAO,IAAI;IACf;EACJ;EACA,OAAO,KAAK;AAChB;AACA,OAAO,SAASC,WAAWA,CAACC,KAAY,EAACC,SAAqB,EAAU;EACpE,KAAI,IAAI/B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,SAAS,CAACtC,MAAM,EAAEO,CAAC,EAAE,EAAE;IACtC,IAAG+B,SAAS,CAAC/B,CAAC,CAAC,CAAC8B,KAAK,KAAKA,KAAK,EAAC;MAC5B,OAAOC,SAAS,CAAC/B,CAAC,CAAC;IACvB;EACJ;EACA,OAAO+B,SAAS,CAAC,CAAC,CAAC;AACvB;AAEA,OAAO,SAASC,eAAeA,CAACD,SAAoB,EAAEE,QAAiB,EAAY;EAC/EC,aAAa,CAACD,QAAQ,CAAC;EACvB,IAAIE,KAAK,GAAGF,QAAQ,CAACH,KAAK,GAAC,CAAC;EAC5BC,SAAS,CAACI,KAAK,CAAC,GAAGF,QAAQ;EAC3B,OAAOF,SAAS;AACpB;AAEA,OAAO,SAASK,cAAcA,CAACC,SAAmB,EAAEC,SAAmB,EAAU;EAC7E,IAAID,SAAS,CAAC5C,MAAM,KAAK6C,SAAS,CAAC7C,MAAM,EACrC,OAAO,KAAK;EAChB,OAAO,IAAI;AACf;AAAC8C,EAAA,GAJeH,cAAc;AAK9B,OAAO,eAAeF,aAAaA,CAACD,QAAiB,EAAC;EAClD,MAAMzB,KAAK,CAAC,WAAW,EAAC;IACpBO,MAAM,EAAC,KAAK;IACZC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBI,WAAW,EAAEW,QAAQ,CAAC9B,EAAE;MACxBqC,OAAO,EAAEP,QAAQ,CAACO,OAAO;MACzBC,OAAO,EAAER,QAAQ,CAACQ;IACtB,CAAC;EACL,CAAC,CAAC;AACN;AACA,OAAO,eAAeC,MAAMA,CAAC5B,KAAY,EAAEX,EAAmB,EAAC;EAC3D,IAAGA,EAAE,EACL,MAAMK,KAAK,CAAC,MAAM,EAAC;IACfO,MAAM,EAAE,KAAK;IACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjB,MAAM,EAAEJ,KAAK;MACbK,OAAO,EAAEhB;IACb,CAAC;EACL,CAAC,CAAC;AACN;AAACwC,GAAA,GATqBD,MAAM;AAU5B,OAAO,MAAME,MAAM,GAAG,MAAAA,CAAA,KAAY;EAC9B,MAAMC,SAAS,GAAGtD,SAAS,CAAC,WAAW,CAAC;EACxC,IAAIuD,OAAO,GAAG,IAAIC,OAAO,EAAE;EAC3BD,OAAO,CAACE,MAAM,CAAC,aAAa,EAAEH,SAAS,CAAC;EACxCrC,KAAK,CAAC,8BAA8B,EAAE;IAClCO,MAAM,EAAE,MAAM;IACd+B,OAAO,EAAEA,OAAO;IAChBG,WAAW,EAAE;EACjB,CAAC,CAAC;AACN,CAAC;AAAA,IAAAV,EAAA,EAAAI,GAAA;AAAAO,YAAA,CAAAX,EAAA;AAAAW,YAAA,CAAAP,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}